(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{100:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return m}));var a=n(3),i=n(7),r=(n(0),n(142)),o={id:"ex6",title:"Exercise 6"},c={unversionedId:"ex/ex6",id:"ex/ex6",isDocsHomePage:!1,title:"Exercise 6",description:"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability in the time given. Feel free to talk with other students as you work, and do not be afraid to ask questions. Aim to complete as much as possible during our meeting and continue to work at home to finish, but you need not hand it in.",source:"@site/docs\\ex\\ex6.md",slug:"/ex/ex6",permalink:"/cs422_sp24/docs/ex/ex6",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/ex/ex6.md",version:"current"},s=[{value:"Learning Objectives",id:"learning-objectives",children:[]},{value:"Quick Question",id:"quick-question",children:[]},{value:"Task 1: Logic-based testing applied to source code",id:"task-1-logic-based-testing-applied-to-source-code",children:[]},{value:"Task 2: Logic-based testing applied to specifications",id:"task-2-logic-based-testing-applied-to-specifications",children:[]}],d={toc:s};function m(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability in the time given. Feel free to talk with other students as you work, and do not be afraid to ask questions. Aim to complete as much as possible during our meeting and continue to work at home to finish, but you need not hand it in. "))),Object(r.b)("h2",{id:"learning-objectives"},"Learning Objectives"),Object(r.b)("div",{className:"admonition admonition-success alert alert--success"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"Objectives")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This exercise should help you practice with:"),Object(r.b)("ul",{parentName:"div"},Object(r.b)("li",{parentName:"ul"},"Logic-based testing"),Object(r.b)("li",{parentName:"ul"},"Logic-based coverage criteria")))),Object(r.b)("h2",{id:"quick-question"},"Quick Question"),Object(r.b)("p",null,"It was mentioned in class that Clause Coverage does not subsume Predicate Coverage. Give an actual example that shows this."),Object(r.b)("h2",{id:"task-1-logic-based-testing-applied-to-source-code"},"Task 1: Logic-based testing applied to source code"),Object(r.b)("p",null,"Consider the following code where ",Object(r.b)("inlineCode",{parentName:"p"},"turnHeaterOn")," decides whether a thermostat must be turned on or not and for how long:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public class Thermostat {\n    private int curTemp; // Current temperature\n    private int thresholdDiff; // Temp difference until heater on\n    private int timeSinceLastRun; // Time since heater stopped\n    private int minLag; // minimum required time interval to turn the thermostat on\n    private boolean Override; // Has user overridden the theromostat program\n    private int overTemp; // OverridingTemp (only used if user overridden the program)\n    private int runTime; // output of turnHeaterOn\u2013how long to run\n    private boolean heaterOn; // whether to run\n    private Period period; // morning, day, evening, or night\n    private DayType day; // week day or weekend day\n\n    // turn the heater on? and for how long?\n    public boolean turnHeaterOn (ProgrammedSettings pSet) {\n       int dTemp = pSet.getSetting(period, day);\n       if (((curTemp < dTemp - thresholdDiff) ||\n          (Override && curTemp < overTemp - thresholdDiff)) && \n          (timeSinceLastRun > minLag)) { // Turn on the heater\n            // How long? Assume 1 minute per degree (Fahrenheit)\n          int timeNeeded = curTemp - dTemp;\n          if (Override)\n             timeNeeded = curTemp - overTemp;\n          setRunTime (timeNeeded);\n          setHeaterOn (true);\n          return (true);\n       }\n       else {\n          setHeaterOn (false);\n          return (false);\n       }\n    } // End turnHeaterOn, setters and getters follow . . .  \n}\n")),Object(r.b)("p",null,"Conduct logic-based testing on the first ",Object(r.b)("inlineCode",{parentName:"p"},"if")," statement within the ",Object(r.b)("inlineCode",{parentName:"p"},"turnHeaterOn")," to achieve:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Predicate coverage (i.e., branch coverage)"),Object(r.b)("li",{parentName:"ol"},"Clause coverage (i.e., condition coverage)"),Object(r.b)("li",{parentName:"ol"},"Correlative Active Clause Coverage (CACC)"),Object(r.b)("li",{parentName:"ol"},"Write actual test cases for CACC")),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},Object(r.b)("inlineCode",{parentName:"p"},"dTemp")," is an example of an ",Object(r.b)("em",{parentName:"p"},"internal")," variable. An internal variable is one that its value is not directly fed into the program; Rather, we need to set the values of ",Object(r.b)("inlineCode",{parentName:"p"},"period")," and ",Object(r.b)("inlineCode",{parentName:"p"},"day")," such that we get the desirable value for ",Object(r.b)("inlineCode",{parentName:"p"},"dTemp"),"."))),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"To make your work easier when writing test requirements for each criterion, rewrite the predicate in the ",Object(r.b)("inlineCode",{parentName:"p"},"if")," statement in short form; that is for each cluase use a short notation e.g., ",Object(r.b)("inlineCode",{parentName:"p"},"(curTemp < dTemp - thresholdDiff)")," is one cluase and you can call it ",Object(r.b)("inlineCode",{parentName:"p"},"A"),". Similarly, use short notations for the other cluases in the predicate."))),Object(r.b)("h2",{id:"task-2-logic-based-testing-applied-to-specifications"},"Task 2: Logic-based testing applied to specifications"),Object(r.b)("p",null,"Consider the following method:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"/** Calculate the number of Days between the two given days in\n *  the same year.\n *\n *  preconditions : day1 and day2 must be in same year\n *     1 <= month1, month2 <= 12  \n *     1 <= day1, day2 <= 31\n *     month1 <= month2\n *     The range for year: 1 ... 10000\n *     \n * @param month1 the month of the first day\n * @param day1 the first day\n * @param month2 the month of the second day\n * @param day2 the second day\n * @param year the year\n * @return the number of days between day1 and day2\n */\npublic static int cal (int month1, int day1, int month2, int day2, int year) {\n   int numDays;\n   if (month2 == month1) // in the same month\n      numDays = day2 - day1;\n   else {\n      int daysIn[] = {0, 31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; // Skip month 0.\n      // Are we in a leap year?\n      int m4 = year % 4;\n      int m100 = year % 100;\n      int m400 = year % 400;\n      if ((m4 != 0) || ((m100 == 0) && (m400 != 0)))\n         daysIn[2] = 28;\n      else\n         daysIn[2] = 29;\n      numDays = day2 + (daysIn[month1] - day1); // start with days in the two months\n      for (int i = month1 + 1; i <= month2-1; i++) // add the days in the intervening months\n         numDays = daysIn[i] + numDays;\n   }\n   return (numDays);\n}\n")),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Formulate the pre-condition in the Javadoc as a logical predicate comprised of a number clauses.  "),Object(r.b)("li",{parentName:"ol"},"List test requirements (TRs) for CACC."),Object(r.b)("li",{parentName:"ol"},"Write actual test cases to satisfy all the listed TRs for CACC in step 1.")))}m.isMDXComponent=!0},142:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=i.a.createContext({}),m=function(e){var t=i.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=m(e.components);return i.a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=m(n),b=a,u=l["".concat(o,".").concat(b)]||l[b]||p[b]||r;return n?i.a.createElement(u,c(c({ref:t},d),{},{components:n})):i.a.createElement(u,c({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var d=2;d<r;d++)o[d]=n[d];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);